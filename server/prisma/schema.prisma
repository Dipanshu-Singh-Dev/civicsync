datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

enum IssueCategory {
  ROAD
  PARK
  PARKING
  LIBRARY
  INFRASTRUCTURE
  SAFETY
  OTHER
}

enum Locations {
  MAYUR_VIHAR
  KANHAIYA_NAGAR
  MANSAROVAR_PARK
  GTB_NAGAR
  KIRTI_NAGAR
  SHAHDARA
  KASHMERE_GATE
  BURARI
  OTHER
}

enum IssueStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}

// Use JSON type instead of embedded document type for MongoDB compatibility
// This allows array operations like filter and some to work correctly
model Upvote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  voterId   String   @db.ObjectId
  issueId   String   @db.ObjectId
  issue     Issue    @relation(fields: [issueId], references: [id], name: "IssueUpvotes")
  createdAt DateTime @default(now())
}

model Downvote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  voterId   String   @db.ObjectId
  issueId   String   @db.ObjectId
  issue     Issue    @relation(fields: [issueId], references: [id], name: "IssueDownvotes")
  createdAt DateTime @default(now())
}

model Issue {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  category    IssueCategory
  location    String
  imageUrls   String[]
  status      IssueStatus   @default(PENDING)
  creatorId   String        @db.ObjectId
  creator     User          @relation(fields: [creatorId], references: [id], name: "UserIssues")
  upvotes     Upvote[]      @relation("IssueUpvotes")
  downvotes   Downvote[]    @relation("IssueDownvotes")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  password      String
  displayName   String?
  createdAt     DateTime @default(now())
  issuesCreated Issue[]  @relation("UserIssues")
}
